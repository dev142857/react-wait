{"version":3,"file":"use-wait.js","sources":["../src/index.js"],"sourcesContent":["import React, { useState, useContext } from \"react\";\n\nconst WaitingContext = React.createContext([]);\n\nfunction Wait(props) {\n  const context = useContext(WaitingContext);\n  return context.waiters.includes(props.message)\n    ? props.waiting\n    : props.children;\n}\n\nexport function Waiter(props) {\n  const [waiters, setWaiters] = useState(useContext(WaitingContext));\n  return (\n    <WaitingContext.Provider\n      value={{\n        waiters,\n        isWaiting(waiter) {\n          return waiters.includes(waiter);\n        },\n        start(waiter) {\n          if (waiters.includes(waiter)) return waiters;\n          const newWaiters = [...waiters, waiter];\n          setWaiters(newWaiters);\n        },\n        end(waiter) {\n          setWaiters(waiters.filter(l => l !== waiter));\n        }\n      }}\n    >\n      {props.children}\n    </WaitingContext.Provider>\n  );\n}\n\nexport function useWait() {\n  const context = useContext(WaitingContext);\n  return {\n    ...context,\n    Wait\n  };\n}\n"],"names":["WaitingContext","React","createContext","Wait","props","useContext","waiters","includes","message","waiting","children","useState","start"],"mappings":"gFAEMA,EAAiBC,EAAMC,cAAc,IAE3C,SAASC,EAAKC,GAEZ,OADgBC,aAAWL,GACZM,QAAQC,SAASH,EAAMI,SAClCJ,EAAMK,QACNL,EAAMM,wBAGL,SAAgBN,GACrB,MAA8BO,WAASN,aAAWL,kBAClD,0EAuBM,sBAEJY"}